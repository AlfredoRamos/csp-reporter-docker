services:
  csp-reporter:
    build:
      context: .
      dockerfile: docker/csp-reporter/Dockerfile
    image: alfredoramos/csp-reporter-backend:alpine
    restart: unless-stopped
    expose:
      - 3000
    depends_on:
      - postgresql
      - redis
    healthcheck:
      test: ["CMD-SHELL", "curl --fail 'http://${APP_ADDRESS}/api/health'"]
      interval: 1m
      timeout: 30s
      retries: 3
      start_period: 1m30s
    networks:
      - backend
      - database
      - cache

  nginx:
    build:
     context: .
     dockerfile: docker/nginx/Dockerfile
    image: alfredoramos/csp-reporter-frontend:alpine
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    expose:
      - 8080
    depends_on:
      - csp-reporter
    healthcheck:
      test: ["CMD-SHELL", "curl --fail http://nginx:8080/health"]
      interval: 1m
      timeout: 30s
      retries: 3
      start_period: 1m30s
    networks:
      - backend
      - frontend
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/dhparam.pem:/etc/nginx/dhparam.pem:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./docker/nginx/health.conf:/etc/nginx/conf.d/health.conf:ro
      - ./docker/nginx/ssl.conf:/etc/nginx/conf.d/ssl.conf:ro
      - ./docker/nginx/security.conf:/etc/nginx/conf.d/security.conf:ro
      - ./docker/nginx/cloudflare.conf:/etc/nginx/conf.d/cloudflare.conf:ro
      - ./docker/nginx/gzip.conf:/etc/nginx/conf.d/gzip.conf:ro
      - /etc/letsencrypt/live/mailsentry.top/fullchain.pem:/srv/ssl/server.crt:ro
      - /etc/letsencrypt/live/mailsentry.top/privkey.pem:/srv/ssl/server.key:ro
      # - /srv/ssl/alfredoramos.mx/intermediate.crt:/srv/ssl/intermediate.crt:ro

  postgresql:
    image: postgres:16-alpine
    restart: unless-stopped
    environment:
      POSTGRES_DB: "${DB_NAME}"
      POSTGRES_USER: "${DB_USER}"
      POSTGRES_PASSWORD: "${DB_PASS}"
      POSTGRES_INITDB_ARGS: --auth-host=scram-sha-256 --auth-local=scram-sha-256
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - 5432:5432
    command: >
      -c ssl=on
      -c ssl_cert_file=/var/lib/postgresql/server.crt
      -c ssl_key_file=/var/lib/postgresql/server.key
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U '${DB_USER}' -h '${DB_HOST}' -d '${DB_NAME}'"]
      interval: 1m
      timeout: 30s
      retries: 3
      start_period: 1m30s
    networks:
      - database
    volumes:
      - pgsqldata:/var/lib/postgresql/data
      - /etc/letsencrypt/live/mailsentry.top/fullchain.pem:/var/lib/postgresql/server.crt:ro
      - /etc/letsencrypt/live/mailsentry.top/privkey.pem:/var/lib/postgresql/server.key:ro

  redis:
    image: redis:7-alpine
    restart: unless-stopped
    command: >
      --requirepass "${REDIS_PASS}"
    healthcheck:
      test: ["CMD-SHELL", "echo 'auth ${REDIS_PASS}\nping' | redis-cli -h '${REDIS_HOST}' | grep 'PONG'"]
      interval: 1m
      timeout: 30s
      retries: 3
      start_period: 1m30s
    networks:
      - cache
    volumes:
      - rdbdata:/data

networks:
  backend: {}
  frontend: {}
  database: {}
  cache: {}

volumes:
  pgsqldata: {}
  rdbdata: {}
